= WebCP : an embryonic "WEB" Control Point

This has two parts:

. A WEB service based on the Bottle Python framework and
  python3-libupnpp. This part receives commands through HTTP and talks UPnP
  on the other side.
. A Python script sending HTTP requests to the service and
  retrieving/translating the result data.

At the moment, the implementation is more or less limited to setting and
retrieving the OpenHome Volume, the initial purpose being to let upmpdcli
control the audio volume through an UPnP preamp instead of through MPD and
the DAC. upmpdcli has had an external volume control capability for a long
time, this is just one possible implementation.

Using a server instead of executing the commands directly in the script
avoids incurring the UPnP Discovery delay at each execution.


== Web service

Run the web service without a parameter to serve on localhost only:

    webcp-run.py

Run as the following to serve on all interfaces:

    webcp-run.py -a 0.0.0.0

Or specify an IP address.

You can change the port with -p. The current default is 9090 (set in
webcp-run.py).

Use webcp.service as a template unit file to be installed in
`/etc/systemd/system/`. You will need to fix the ExecStart script
path. Also possibly adjust the user/group, depending on local taste (nobody
works for me as the service does not store anything). Add parameters for
address and port if the default localhost:9090 is not appropriate.

Then use `systemctl enable webcp` and
`systemctl start webcp` to enable and start.

The WEB service has a main method to run an UPnP action, on '/'. This is
accessed by the script described in the next section.

It also has a `/devices` access which can be used to list the
UDN/FriendlyNames pairs found on the network. Use it with something like:

    curl http://localhost:9090/devices

== Client script

The script uses the `curl` command because this comes preinstalled on most
Linux systems as far as I know. Of course, we could use Python-requests
instead but this would add a dependancy.

The script takes 4 or 5 command line parameters:

. host:port on which the web service runs (e.g. `localhost:9090`,
  `192.168.0.1:9090`)
. device name (friendly or UDN)
. service name: only tested with `Volume` at the moment
. action name : only tested with `Volume` or `SetVolume`
. if action is `SetVolume`, volume value (0-100)

The script pretends to be a bit generic but it assumes that the return
value is held in the `Value` named parameter in the HTTP output data, which
would not be true in general.

It would be possible to extend the script by, for example, passing it the
return argument name on the command line.

It is already possible to pass more action parameters, they must be in the
order expected by the UPnP action. The WEB service will append any
additional query parameters to the libupnpp `runaction` method action
arguments, and libupnpp does the magic of adding the parameter names,
because it knows the service description, but using the script supposes
that you know it too.

== Upmpdcli interface

The data in `/etc/upmpdcli.conf` would look like the following.

Of course, adjust the command path, the ip address or host name, and the 
UPnP device name as needed:

----
externalvolumecontrol = 1
onvolumechange = /path/to/webcp/webremote.py \
    localhost:9090 renderername Volume SetVolume
getexternalvolume = /path/to/webcp/webremote.py \
    localhost:9090 renderername Volume Volume
----

Use the UPnP device name NOT the OpenHome room name.

The volume value will be added to the `onvolumechange` command line by
upmpdcli. 
